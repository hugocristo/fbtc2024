banco$caption <- str_to_lower(banco$caption, locale="pt")
# detecta ocorrências nos textos dos posts (não + 4 palavras)
frases.nao <- which(str_detect(banco$caption, "não\\s\\w{1,}\\s\\w{1,}\\s\\w{1,}"))
# limita colunas da análise (1-4)
frases.nao.texto <- banco[frases.nao,1:4]
# detecta prescrições nos posts
for (linha in 1:nrow(frases.nao.texto)) {
prescricoes <- str_extract_all(frases.nao.texto$caption[linha], "não\\s\\w{1,}\\s\\w{1,}\\s\\w{1,}", simplify = TRUE)
# prescrições do post
for (p in 1:length(prescricoes)) {
# adiciona coluna
frases.nao.texto[linha,str_c("prescricao_",p)] <- prescricoes[p]
}
}
View(frases.nao.texto)
unique(banco$ownerUsername)
banco.anonimo <- banco[,1:4]
View(banco.anonimo)
perfis.anonimos <- unique(banco$ownerUsername)
perfis.anonimos
perfis.anonimos <- str_c("influenciador",seq(1:length(perfis.originais)))
perfis.originais <- unique(banco$ownerUsername)
perfis.anonimos <- str_c("influenciador",seq(1:length(perfis.originais)))
perfis.anonimos
usuarios <- c('drajannuzzi',
'carolmaiasonodobebe',
'tati.joslin',
'alicesimaooficial',
'psimamaa',
'pastora.analaura',
'maternidadevibrante',
'clubedasgravidas',
'aliceschultes',
'virei.mae.oficial',
)
usuarios <- c('drajannuzzi',
'carolmaiasonodobebe',
'tati.joslin',
'alicesimaooficial',
'psimamaa',
'pastora.analaura',
'maternidadevibrante',
'clubedasgravidas',
'aliceschultes',
'virei.mae.oficial'
)
banco.limpo <- subset(banco,
ownerUsername == usuarios)
View(banco.limpo)
usuarios <- c('drajannuzzi',
'carolmaiasonodobebe',
'tati.joslin',
'alicesimaooficial',
'psimamaa',
'pastora.analaura',
'maternidadevibrante',
'clubedasgravidas',
'aliceschultes',
'virei.mae.oficial'
)
banco.limpo <- subset(banco,
ownerUsername = usuarios)
usuarios <- 'drajannuzzi'|
'carolmaiasonodobebe'|
'tati.joslin'|
'alicesimaooficial'|
'psimamaa'|
'pastora.analaura'|
'maternidadevibrante'|
'clubedasgravidas'|
'aliceschultes'|
'virei.mae.oficial'
# -----------------------------------------------------------
# 03-prescricoes.R
# -----------------------------------------------------------
# FBTC 2014 - Kátia Cristina de Paula e Hugo Cristo Sant'Anna
# Universidade Federal do Espírito Santo
# Programa de Pós-Graduação em Psicologia
# https://github.com/hugocristo/fbtc2024
library (readxl)
library (stringr)
# seleciona banco
banco <- read_xlsx("./dados/banco-completo.xlsx")
# tranforma texto para minísculas
banco$caption <- str_to_lower(banco$caption, locale="pt")
# detecta ocorrências nos textos dos posts (não + 4 palavras)
frases.nao <- which(str_detect(banco$caption, "não\\s\\w{1,}\\s\\w{1,}\\s\\w{1,}"))
# limita colunas da análise (1-4)
frases.nao.texto <- banco[frases.nao,1:4]
# detecta prescrições nos posts
for (linha in 1:nrow(frases.nao.texto)) {
prescricoes <- str_extract_all(frases.nao.texto$caption[linha], "não\\s\\w{1,}\\s\\w{1,}\\s\\w{1,}", simplify = TRUE)
# prescrições do post
for (p in 1:length(prescricoes)) {
# adiciona coluna
frases.nao.texto[linha,str_c("prescricao_",p)] <- prescricoes[p]
}
}
unique(banco$ownerUsername)
table(banco$ownerUsername,banco$likesCount)
tapply(banco$ownerUsername,banco$likesCount,sum)
tapply(bancobanco$likesCount,sum)
library (readxl)
library (stringr)
# seleciona banco
banco <- read_xlsx("./dados/banco-completo.xlsx")
View(banco)
# -----------------------------------------------------------
# 03-prescricoes.R
# -----------------------------------------------------------
# FBTC 2014 - Kátia Cristina de Paula e Hugo Cristo Sant'Anna
# Universidade Federal do Espírito Santo
# Programa de Pós-Graduação em Psicologia
# https://github.com/hugocristo/fbtc2024
library (readxl)
library (stringr)
# seleciona banco
banco <- read_xlsx("./dados/banco-completo.xlsx")
# tranforma texto para minísculas
banco$caption <- str_to_lower(banco$caption, locale="pt")
# detecta ocorrências nos textos dos posts (não + 4 palavras)
frases.nao <- which(str_detect(banco$caption, "não\\s\\w{1,}\\s\\w{1,}\\s\\w{1,}"))
# limita colunas da análise (1-4)
frases.nao.texto <- banco[frases.nao,1:4]
# detecta prescrições nos posts
for (linha in 1:nrow(frases.nao.texto)) {
prescricoes <- str_extract_all(frases.nao.texto$caption[linha], "não\\s\\w{1,}\\s\\w{1,}\\s\\w{1,}", simplify = TRUE)
# prescrições do post
for (p in 1:length(prescricoes)) {
# adiciona coluna
frases.nao.texto[linha,str_c("prescricao_",p)] <- prescricoes[p]
}
}
View(frases.nao.texto)
View(frases.nao.texto)
# seleciona banco
banco <- read_xlsx("./dados/banco-completo.xlsx")
tapply(banco,banco$ownerUsername,count)
tapply(banco,banco$ownerUsername,length)
# seleciona banco
banco <- read_xlsx("./dados/banco-completo-anonimo.xlsx")
tapply(banco,banco$ownerUsername,length)
# -----------------------------------------------------------
# 03-prescricoes.R
# -----------------------------------------------------------
# FBTC 2014 - Kátia Cristina de Paula e Hugo Cristo Sant'Anna
# Universidade Federal do Espírito Santo
# Programa de Pós-Graduação em Psicologia
# https://github.com/hugocristo/fbtc2024
library (readxl)
library (stringr)
# seleciona banco
banco <- read_xlsx("./dados/banco-completo-anonimo.xlsx")
# tranforma texto para minísculas
banco$caption <- str_to_lower(banco$caption, locale="pt")
# detecta ocorrências nos textos dos posts (não + 4 palavras)
frases.nao <- which(str_detect(banco$caption, "não\\s\\w{1,}\\s\\w{1,}\\s\\w{1,}"))
# limita colunas da análise (1-4)
frases.nao.texto <- banco[frases.nao,1:4]
# detecta prescrições nos posts
for (linha in 1:nrow(frases.nao.texto)) {
prescricoes <- str_extract_all(frases.nao.texto$caption[linha], "não\\s\\w{1,}\\s\\w{1,}\\s\\w{1,}", simplify = TRUE)
# prescrições do post
for (p in 1:length(prescricoes)) {
# adiciona coluna
frases.nao.texto[linha,str_c("prescricao_",p)] <- prescricoes[p]
}
}
# exibe
View(frases.nao.texto)
# seleciona banco
banco <- read_xlsx("./dados/banco-completo-anonimo.xlsx")
View(banco)
# -----------------------------------------------------------
# 03-prescricoes.R
# -----------------------------------------------------------
# FBTC 2014 - Kátia Cristina de Paula e Hugo Cristo Sant'Anna
# Universidade Federal do Espírito Santo
# Programa de Pós-Graduação em Psicologia
# https://github.com/hugocristo/fbtc2024
library (readxl)
library (stringr)
# seleciona banco
banco <- read_xlsx("./dados/banco-completo-anonimo.xlsx")
# tranforma texto para minísculas
banco$caption <- str_to_lower(banco$caption, locale="pt")
# detecta ocorrências nos textos dos posts (não + 4 palavras)
frases.nao <- which(str_detect(banco$caption, "não\\s\\w{1,}\\s\\w{1,}\\s\\w{1,}"))
# limita colunas da análise (1-4)
frases.nao.texto <- banco[frases.nao,1:2]
# detecta prescrições nos posts
for (linha in 1:nrow(frases.nao.texto)) {
prescricoes <- str_extract_all(frases.nao.texto$caption[linha], "não\\s\\w{1,}\\s\\w{1,}\\s\\w{1,}", simplify = TRUE)
# prescrições do post
for (p in 1:length(prescricoes)) {
# adiciona coluna
frases.nao.texto[linha,str_c("prescricao_",p)] <- prescricoes[p]
}
}
# exibe
View(frases.nao.texto)
frases.nao.texto$caption[13]
View(frases.nao.texto)
# -----------------------------------------------------------
# 03-prescricoes.R - atualizado em 12/04/2024
# -----------------------------------------------------------
# FBTC 2014 - Kátia Cristina de Paula e Hugo Cristo Sant'Anna
# Universidade Federal do Espírito Santo
# Programa de Pós-Graduação em Psicologia
# https://github.com/hugocristo/fbtc2024
# -----------------------------------------------------------
library (readxl)
library (stringr)
# seleciona banco
banco <- read_xlsx("./dados/banco-completo-anonimo.xlsx")
# tranforma texto para minísculas
banco$caption <- str_to_lower(banco$caption, locale="pt")
# detecta ocorrências nos textos dos posts (não + 4 palavras)
frases.nao <- which(str_detect(banco$caption, "não\\s\\w{1,}\\s\\w{1,}\\s\\w{1,}"))
# limita colunas da análise (1-4)
frases.nao.texto <- banco[frases.nao,1:2]
# detecta prescrições nos posts
for (linha in 1:nrow(frases.nao.texto)) {
prescricoes <- str_extract_all(frases.nao.texto$caption[linha], "não\\s\\w{1,}\\s\\w{1,}\\s\\w{1,}", simplify = TRUE)
# prescrições do post
for (p in 1:length(prescricoes)) {
# adiciona coluna
frases.nao.texto[linha,str_c("prescricao_",p)] <- prescricoes[p]
}
}
# exibe resultado
View(frases.nao.texto)
# -----------------------------------------------------------
# 01-nuvem-palavras.R - atualizado em 12/04/2024
# -----------------------------------------------------------
# FBTC 2014 - Kátia Cristina de Paula e Hugo Cristo Sant'Anna
# Universidade Federal do Espírito Santo
# Programa de Pós-Graduação em Psicologia
# https://github.com/hugocristo/fbtc2024
# -----------------------------------------------------------
library (readxl)
library (wordcloud2)
banco <- read_xlsx("./dados/lista-palavras.xlsx")
wordcloud2(lista.hashtags.freq, size=1.6, color='random-dark')
# -----------------------------------------------------------
# 01-nuvem-palavras.R - atualizado em 12/04/2024
# -----------------------------------------------------------
# FBTC 2014 - Kátia Cristina de Paula e Hugo Cristo Sant'Anna
# Universidade Federal do Espírito Santo
# Programa de Pós-Graduação em Psicologia
# https://github.com/hugocristo/fbtc2024
# -----------------------------------------------------------
library (readxl)
library (wordcloud2)
banco <- read_xlsx("./dados/lista-palavras.xlsx")
wordcloud2(banco, size=1.6, color='random-dark')
# nuvem de palavras com frequência > 5
wordcloud2(banco[banco$frequencia > 5,], size=1.6, color='random-dark')
View(banco)
# nuvem de palavras com frequência > 5
wordcloud2(banco[banco$frequencia > 10,], size=1.6, color='random-dark')
# nuvem de palavras com frequência > 5
wordcloud2(banco[banco$frequencia > 10,], size=1.6, color='random-dark')
# nuvem de palavras com frequência > 5
wordcloud2(banco[banco$frequencia > 15,], size=1.6, color='random-dark')
# nuvem de palavras com frequência > 5
wordcloud2(banco[banco$frequencia > 15,], size=1.6, color='random-dark')
# nuvem de palavras com frequência > 5
wordcloud2(banco[banco$frequencia > 15,], size=1.6, color='random-dark')
# nuvem de palavras com frequência > 5
wordcloud2(banco[banco$frequencia > 20,], size=1.6, color='random-dark')
# nuvem de palavras com frequência > 5
wordcloud2(banco[banco$frequencia > 15,], size=1.2, color='random-dark')
# nuvem de palavras com frequência > 5
wordcloud2(banco[banco$frequencia > 15,], size=1, color='random-dark')
# -----------------------------------------------------------
# 01-gera-lista-palavras.R - atualizado em 12/04/2024
# -----------------------------------------------------------
# FBTC 2014 - Kátia Cristina de Paula e Hugo Cristo Sant'Anna
# Universidade Federal do Espírito Santo
# Programa de Pós-Graduação em Psicologia
# https://github.com/hugocristo/fbtc2024
# -----------------------------------------------------------
library (readxl)
library (stringr)
banco <- read_xlsx("./dados/banco-completo-anonimo.xlsx")
hashtags <- data.frame()
# cria vetor linhas de todas as hashtags não vazias
for (coluna in 5:21) {
quais.hashtags <- which(!is.na(banco[,coluna]))
lista.hashtags <- banco[quais.hashtags,coluna]
print(lista.hashtags)
# adiciona ao banco
for (h in 1:nrow(lista.hashtags)) {
hashtags <- rbind(hashtags, data.frame(
"hashtag"=as.character(lista.hashtags[h,1]),
stringsAsFactors = FALSE
))
}
}
# únicas
hashtags.unicas <- unique(hashtags)
hashtags.unicas$freq <- 0
# conta
for (h in 1:nrow(hashtags.unicas)) {
ht <- hashtags.unicas$hashtag[h]
total <- sum(str_count(ht,hashtags$hashtag))
cat(ht,":",total,"\n")
hashtags.unicas$freq[h] <- total
}
View(lista.hashtags)
View(hashtags.unicas)
View(hashtags.unicas)
View(hashtags.unicas)
# -----------------------------------------------------------
# 04-gera-lista-hashtags.R - atualizado em 12/04/2024
# -----------------------------------------------------------
# FBTC 2014 - Kátia Cristina de Paula e Hugo Cristo Sant'Anna
# Universidade Federal do Espírito Santo
# Programa de Pós-Graduação em Psicologia
# https://github.com/hugocristo/fbtc2024
# -----------------------------------------------------------
library (readxl)
library (stringr)
banco <- read_xlsx("./dados/banco-completo-anonimo.xlsx")
# data.frame para hashtags
hashtags <- data.frame()
# cria vetor linhas de todas as hashtags não vazias
for (coluna in 5:21) {
quais.hashtags <- which(!is.na(banco[,coluna]))
lista.hashtags <- banco[quais.hashtags,coluna]
print(lista.hashtags)
# adiciona ao banco
for (h in 1:nrow(lista.hashtags)) {
hashtags <- rbind(hashtags, data.frame(
"hashtag"=as.character(lista.hashtags[h,1]),
stringsAsFactors = FALSE
))
}
}
# únicas
hashtags.unicas <- unique(hashtags)
# define frequência zero
hashtags.unicas$freq <- 0
# contagem
for (h in 1:nrow(hashtags.unicas)) {
ht <- hashtags.unicas$hashtag[h]
total <- sum(str_count(ht,hashtags$hashtag))
# saída para o usuário
cat(ht,":",total,"\n")
# define total
hashtags.unicas$freq[h] <- total
}
# exibe banco resultante
View(hashtags.unicas)
# exporta banco como CSV
# write.csv2(hashtags.unicas,"lista-hashtags-unicas.csv")
# -----------------------------------------------------------
# 01-gera-lista-palavras.R - atualizado em 12/04/2024
# -----------------------------------------------------------
# FBTC 2014 - Kátia Cristina de Paula e Hugo Cristo Sant'Anna
# Universidade Federal do Espírito Santo
# Programa de Pós-Graduação em Psicologia
# https://github.com/hugocristo/fbtc2024
# -----------------------------------------------------------
remotes::install_github("hadley/emo")
library (readxl)
library (stringr)
library(emo)
banco <- read_xlsx("./dados/banco-completo-anonimo.xlsx")
# hapáx
remover.palavras <- c("da","das","de","do","dos",
"com","como","que","por","para",
"a","as","à","às","o","os","em","é","e","que",
"se","mas","um","uns",
"na","nas","no","nos",
"ou", "está", "seu", "sua", "seus", "suas",
"isso", "disso", "esse", "desse", "esses", "desses",
"essa", "dessa", "essas", "dessas",
"aquele", "aquela", "este", "estes")
remover.pontuacao <- c("\\“","\\”","\\?","\\!",
"\\:","\\,","\\.","\"",
"\\)","\\(","\\.\\.\\.")
# seleciona posts
posts <- banco$caption
# cria df com palavras dos posts
lista.palavras <- data.frame()
# laço pelos posts
for (t in 1:length(posts)) {
# se o post não estiver vazio
if (!is.na(posts[t])) {
# transforma hífen sozinho no início da linha em espaço (tópico)
posts[t] <- str_replace_all(posts[t],"^\\-","")
# remove traços isolados
posts[t] <- str_replace_all(posts[t],"\\s\\-\\s"," ")
# remove reticências
posts[t] <- str_replace_all(posts[t],"…"," ")
# remove caracteres bizarros e números
posts[t] <- str_replace_all(posts[t],"[:digit:]|⠀|⬇|☡|—|___|✔|❤"," ")
# remove quebras de linha
posts[t] <- str_replace_all(posts[t],"\\r\\n"," ")
# remove hapáx e emoji
posts[t] <- str_replace_all(posts[t],str_c("\\b",remover.palavras,"\\b",collapse="|"),"")
posts[t] <- str_remove_all(posts[t],str_c(remover.pontuacao,collapse="|"))
# remove pontuação
posts[t] <- str_remove_all(posts[t],str_c(remover.pontuacao,collapse="|"))
# remove emojis (hadley/emo)
posts[t] <- ji_replace_all(posts[t],"")
# remove espaços duplos
posts[t] <- str_squish(posts[t])
# remove pontuação
#posts[t] <- removePunctuation(posts[t])
# caixa baixa e únicos
posts[t] <- str_to_lower(posts[t],locale="pt")
# quebra texto em palavras
post <- str_split(posts[t],"\\s", simplify = TRUE)
# importa para o df
lista.palavras <- rbind(lista.palavras,data.frame("palavra"=as.character(post), stringsAsFactors = FALSE))
}
}
# remove duplicadas
lista.palavras.unicas <- unique(lista.palavras$palavra)
# novo dataframe
lista.palavras.freq <- data.frame("palavra"=lista.palavras.unicas,"freq"=rep(0,length(lista.palavras.unicas)), stringsAsFactors = FALSE)
# exporta lista de palavras
#write.csv2(lista.palavras.freq,"lista.palavras.csv")
# -----------------------------------------------------------
# 01-gera-lista-palavras.R - atualizado em 12/04/2024
# -----------------------------------------------------------
# FBTC 2014 - Kátia Cristina de Paula e Hugo Cristo Sant'Anna
# Universidade Federal do Espírito Santo
# Programa de Pós-Graduação em Psicologia
# https://github.com/hugocristo/fbtc2024
# -----------------------------------------------------------
remotes::install_github("hadley/emo")
library (readxl)
library (stringr)
library(emo)
banco <- read_xlsx("./dados/banco-completo-anonimo.xlsx")
# hapáx
remover.palavras <- c("da","das","de","do","dos",
"com","como","que","por","para",
"a","as","à","às","o","os","em","é","e","que",
"se","mas","um","uns",
"na","nas","no","nos",
"ou", "está", "seu", "sua", "seus", "suas",
"isso", "disso", "esse", "desse", "esses", "desses",
"essa", "dessa", "essas", "dessas",
"aquele", "aquela", "este", "estes")
remover.pontuacao <- c("\\“","\\”","\\?","\\!",
"\\:","\\,","\\.","\"",
"\\)","\\(","\\.\\.\\.")
# seleciona posts
posts <- banco$caption
# cria df com palavras dos posts
lista.palavras <- data.frame()
# laço pelos posts
for (t in 1:length(posts)) {
# se o post não estiver vazio
if (!is.na(posts[t])) {
# transforma hífen sozinho no início da linha em espaço (tópico)
posts[t] <- str_replace_all(posts[t],"^\\-","")
# remove traços isolados
posts[t] <- str_replace_all(posts[t],"\\s\\-\\s"," ")
# remove reticências
posts[t] <- str_replace_all(posts[t],"…"," ")
# remove caracteres bizarros e números
posts[t] <- str_replace_all(posts[t],"[:digit:]|⠀|⬇|☡|—|___|✔|❤"," ")
# remove quebras de linha
posts[t] <- str_replace_all(posts[t],"\\r\\n"," ")
# remove hapáx e emoji
posts[t] <- str_replace_all(posts[t],str_c("\\b",remover.palavras,"\\b",collapse="|"),"")
posts[t] <- str_remove_all(posts[t],str_c(remover.pontuacao,collapse="|"))
# remove pontuação
posts[t] <- str_remove_all(posts[t],str_c(remover.pontuacao,collapse="|"))
# remove emojis (hadley/emo)
posts[t] <- ji_replace_all(posts[t],"")
# remove espaços duplos
posts[t] <- str_squish(posts[t])
# remove pontuação
#posts[t] <- removePunctuation(posts[t])
# caixa baixa e únicos
posts[t] <- str_to_lower(posts[t],locale="pt")
# quebra texto em palavras
post <- str_split(posts[t],"\\s", simplify = TRUE)
# importa para o df
lista.palavras <- rbind(lista.palavras,data.frame("palavra"=as.character(post), stringsAsFactors = FALSE))
}
}
# remove duplicadas
lista.palavras.unicas <- unique(lista.palavras$palavra)
# novo dataframe
lista.palavras.freq <- data.frame("palavra"=lista.palavras.unicas,"freq"=rep(0,length(lista.palavras.unicas)), stringsAsFactors = FALSE)
# exporta lista de palavras
#write.csv2(lista.palavras.freq,"lista.palavras.csv")
View(lista.palavras.freq)
View(lista.palavras)
for (p in 1:nrow(banco)) {
linha.hash <- c()
for (h in 5:26) {
if (!is.na(banco[p,h])) {
cat("encontrei:",as.character(banco[p,h]),"\n")
linha.hash <- c(linha.hash, str_to_lower(as.character(banco[p,h])))
}
}
print(linha.hash)
if (length(linha.hash) > 0) {
banco$hashtags[p] <- str_c(linha.hash,collapse="; ")
}
}
View(lista.palavras.freq)
View(banco)
